<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                            http://www.springframework.org/schema/context    
                            http://www.springframework.org/schema/context/spring-context-4.3.xsd
                            http://www.springframework.org/schema/mvc    
                            http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
    <!-- 自动扫描 -->
    <context:component-scan base-package="cn.wxz1997" />
    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
    </bean>

    <!--配置sqlSessionFactory对象-->
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource" />
        <!--配置需要扫描的mapper.xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!--配置entity包,也就是实体类包，自动扫描,用于别名配置 eg:cn.wxz1997.User=User-->
        <property name="typeAliasesPackage" value="cn.wxz1997.entity"/>
        <!--配置mybatis全局配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>

    </bean>

    <!--配置dao接口包,动态实现dao接口，注入到Spring容器-->
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--给出要扫描的dao接口包-->
        <property name="basePackage" value="cn.wxz1997.dao" />
        <!--注入sqlSessionFactory,请注意不要使用sqlSessionFactoryBean，否则会出现注入异常-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置shiro-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!--配置认证器和授权器-->
        <property name="authenticator" ref="authenticator"/>
        <property name="authorizer" ref="authorizer"/>

    </bean>
    <!--认证器-->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <!--多realm-->
        <property name="realms">
            <list>
                <ref bean="userRealm"/>
                <ref bean="userRealm2"/>
            </list>
        </property>
        <!--
        添加认证策略，默认是AtLeastOneSuccessfulStrategy
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"/>
        </property>
        -->
    </bean>

    <!--授权器-->
    <bean id="authorizer" class="org.apache.shiro.authz.ModularRealmAuthorizer">
        <!--多realm-->
        <property name="realms">
            <list>
                <ref bean="userRealm"/>
                <ref bean="userRealm2"/>
            </list>
        </property>
    </bean>

    <!--1.缓存管理器-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>
    <!--2.自定义realm-->
    <bean id="userRealm" class="cn.wxz1997.realm.UserRealm">
        <!--配置凭证匹配器：credentialsMatcher,进行加密-->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!--加密算法-->
                <property name="hashAlgorithmName" value="MD5"/>
                <!--迭代次数-->
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>
    <bean id="userRealm2" class="cn.wxz1997.realm.UserRealm2">
        <!--进行加密-->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!--加密算法-->
                <property name="hashAlgorithmName" value="SHA1"/>
                <!--迭代次数-->
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>
    <!--3.必须要有这样的实例管理spring中shiro常见对象
        可以自动的调用在spring Ioc容器中shiro bean的生命周期的方法
    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!--4.启用shiro注解， 前提是有配置3-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!--5.网络方面-->
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!--
        6.配置ShiroFilter
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login"/>
        <property name="successUrl"  value="/index"/>
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <!--配置拦截器链(utl采取匹配第一个出现的拦截器)-->
        <property name="filterChainDefinitions">
            <value>
                /login = anon
                /user/login = anon
                /user/logout = logout
                /admin = authc, roles[admin]
                /user = roles[user]
                /index = user
                /** = authc
            </value>
        </property>
     </bean>
</beans>